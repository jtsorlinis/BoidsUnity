#define blockSize 1024

struct Boid {
  float3 pos;
  float colour;
  float3 vel;
  float pad1;
};

StructuredBuffer<Boid> boidsIn;
RWStructuredBuffer<Boid> boidsOut;
uniform uint numBoids;
uniform float deltaTime;
uniform float maxSpeed;
uniform float minSpeed;
uniform float edgeMargin;
uniform float visualRangeSq;
uniform float cohesionFactor;
uniform float separationFactor;
uniform float alignmentFactor;
uniform float minDistanceSq;
uniform float turnSpeed;
uniform float xBound;
uniform float yBound;
uniform float zBound;

StructuredBuffer<uint> gridOffsetBuffer;
float gridCellSize;
uint gridDimX;
uint gridDimY;
uint gridDimZ;

uint3 getGridLocation(Boid boid) {
  int boidX = floor(boid.pos.x / gridCellSize + gridDimX / 2);
  int boidY = floor(boid.pos.y / gridCellSize + gridDimY / 2);
  int boidZ = floor(boid.pos.z / gridCellSize + gridDimZ / 2);
  return uint3(boidX, boidY, boidZ);
}

uint getGridID(uint3 pos) {
  return (gridDimY * gridDimX * pos.z) + (gridDimX * pos.y) + pos.x;
}

void MergedBehaviours(inout Boid boid) {
  float3 center = 0;
  float3 close = 0;
  float3 avgVel = 0;
  uint neighbours = 0;

  uint3 gridXYZ = getGridLocation(boid);
  uint cell = getGridID(gridXYZ);
  uint zStep = gridDimX * gridDimY;

  if(boid.colour != 1) {
    boid.colour = 0; // Reset color if not the main boid
  }

  for (uint z = cell - zStep; z <= cell + zStep; z += zStep) {
    for (uint y = z - gridDimX; y <= z + gridDimX; y += gridDimX) {
      uint start = gridOffsetBuffer[y - 1];
      uint end = gridOffsetBuffer[y + 2];

      for (uint i = start; i < end; i++) {
        Boid other = boidsIn[i];
        float3 diff = boid.pos - other.pos;
        float distSq = dot(diff, diff);
        
        if(boid.colour != 1 && other.colour == 1) {
          boid.colour = 2; // Change color to black if in check range of main boid
        }
        if (distSq < visualRangeSq && distSq > 0) {
          if(boid.colour != 1 && other.colour == 1) {
            boid.colour = 3; // Change color to green if interacting with main boid
          }
          if (distSq < minDistanceSq) {
            float invDistSq = 1.0 / distSq;
            close += diff * invDistSq;
          }
          center += other.pos;
          avgVel += other.vel;
          neighbours++;
        }
      }
    }
  }

  if (neighbours > 0) {
    center /= neighbours;
    avgVel /= neighbours;

    boid.vel += (center - boid.pos) * (cohesionFactor * deltaTime);
    boid.vel += (avgVel - boid.vel) * (alignmentFactor * deltaTime);
  }

  boid.vel += close * (separationFactor * deltaTime);
}

void LimitSpeed(inout Boid boid) {
  float speed = length(boid.vel);
  float clampedSpeed = clamp(speed, minSpeed, maxSpeed);
  boid.vel *= clampedSpeed / speed;
}

void KeepInBounds(inout Boid boid) {
  if (abs(boid.pos.x) > xBound) {
    boid.vel.x -= sign(boid.pos.x) * deltaTime * turnSpeed;
  }
  if (abs(boid.pos.y) > yBound) {
    boid.vel.y -= sign(boid.pos.y) * deltaTime * turnSpeed;
  }
  if (abs(boid.pos.z) > zBound) {
    boid.vel.z -= sign(boid.pos.z) * deltaTime * turnSpeed;
  }
}

#pragma kernel UpdateBoids // ID 0
[numthreads(blockSize, 1, 1)]
void UpdateBoids(uint3 id : SV_DispatchThreadID) {
  if (id.x >= numBoids) {
    return;
  }
  
  Boid boid = boidsIn[id.x];
  
  MergedBehaviours(boid);
  LimitSpeed(boid);
  KeepInBounds(boid);

  // Update positions
  boid.pos += boid.vel * deltaTime;


  boidsOut[id.x] = boid;
}

// Basic random generation
uint randSeed;
uint rngState;
float randPCG(float min, float max) {
  rngState = rngState * 747796405u + 2891336453u;
  uint state = rngState;
  uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
  float f = ((word >> 22u) ^ word) / 4294967296.0;
  return f * (max - min) + min;
}

#pragma kernel GenerateBoids // ID 1
[numthreads(blockSize, 1, 1)]
void GenerateBoids(uint3 id : SV_DispatchThreadID) {
  rngState = randSeed + id.x;
  boidsOut[id.x].pos = float3(randPCG(-xBound, xBound), randPCG(-yBound, yBound), randPCG(-zBound, zBound));
  boidsOut[id.x].vel = float3(randPCG(-maxSpeed, maxSpeed), randPCG(-maxSpeed, maxSpeed), randPCG(-maxSpeed, maxSpeed));
  if(id.x == 0) {
    boidsOut[id.x].colour = 1; // Set the first boid as the main boid
  } else {
    boidsOut[id.x].colour = 0; // Other boids are default
  }
}
